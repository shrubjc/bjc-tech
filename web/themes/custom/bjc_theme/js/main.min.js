
jQuery(document).ready(function(o){var s=o(window).scrollTop();o(window).scroll(function(){var e;1024<o(window).width()&&(e=o(window).scrollTop(),s<e&&e<100?(o(".site-newheader").addClass("on-scroll-down"),o(".site-newheader").removeClass("on-scroll-up")):(o(".site-newheader").removeClass("on-scroll-down"),o(".site-newheader").addClass("on-scroll-up"),o(".site-newheader").removeClass("on-pin")),e<100&&(o(".site-newheader").removeClass("on-scroll-down"),o(".site-newheader").removeClass("on-scroll-up")),s<e&&600<e&&o(".site-newheader").addClass("on-pin"),0===o("#toolbar-administration").length&&o(".site-newheader").addClass("anonymous-user"),s=e)})});



//# sourceMappingURL=data:application/json;charset=utf8;base64,
