
jQuery(document).ready(function(o){var s=o(window).scrollTop();o(window).scroll(function(){var e=o(window).scrollTop();s<e&&e<100?(o(".site-newheader").addClass("on-scroll-down"),o(".site-newheader").removeClass("on-scroll-up")):(o(".site-newheader").removeClass("on-scroll-down"),o(".site-newheader").addClass("on-scroll-up"),o(".site-newheader").removeClass("on-pin")),e<100&&(o(".site-newheader").removeClass("on-scroll-down"),o(".site-newheader").removeClass("on-scroll-up")),s<e&&600<e&&o(".site-newheader").addClass("on-pin"),s=e})});



//# sourceMappingURL=data:application/json;charset=utf8;base64,{"version":3,"sources":["animation.js","header.js","inner-page-flex.js","list-pages.js","main.js"],"names":["jQuery","document","ready","$","position","window","scrollTop","scroll","addClass","removeClass"],"mappings":"AAAA;ACAAA,OAAOC,QAAQ,EAAEC,MAAM,SAASC,GAG5B,IAAIC,EAAWD,EAAEE,MAAM,EAAEC,UAAU,EAEnCH,EAAEE,MAAM,EAAEE,OAAO,WACb,IAAIA,EAASJ,EAAEE,MAAM,EAAEC,UAAU,EACrBF,EAATG,GAAqBA,EAAS,KAC/BJ,EAAE,iBAAiB,EAAEK,SAAS,gBAAgB,EAC9CL,EAAE,iBAAiB,EAAEM,YAAY,cAAc,IAE/CN,EAAE,iBAAiB,EAAEM,YAAY,gBAAgB,EACjDN,EAAE,iBAAiB,EAAEK,SAAS,cAAc,EAC5CL,EAAE,iBAAiB,EAAEM,YAAY,QAAQ,GAGxCF,EAAS,MACVJ,EAAE,iBAAiB,EAAEM,YAAY,gBAAgB,EACjDN,EAAE,iBAAiB,EAAEM,YAAY,cAAc,GAGrCL,EAATG,GAA8B,IAATA,GACtBJ,EAAE,iBAAiB,EAAEK,SAAS,QAAQ,EAGxCJ,EAAWG,CAEf,CAAC,CA0IL,CAAC;ACrKD;ACAA;ACAA","file":"main.min.js","sourcesContent":["// jQuery(document).ready(function($) {\n\n//     //Greensock Config\n//     gsap.config({\n//       nullTargetWarn: false,\n//     });\n//     //Gradient Animations\n//     $('.inner-hero.background-royal-blue, .single-blog_hero, .blog-list_hero').each(function(){\n//         const b1 = \"linear-gradient(266.5deg, #70AFD7 -38.35%, #00529B 56.17%, #00315D 134.62%)\";\n//         const b2 = \"linear-gradient(17deg, #70AFD7 -38.35%, #00529B 56.17%, #00315D 134.62%)\";\n//         gsap.fromTo(\".background-royal-blue, .single-blog_hero, .blog-list_hero\", {background: b1}, {ease: \"none\", duration: 10, background: b2, repeat: -1, yoyo: true});\n//     });\n//     $('.inner-hero.background-teal').each(function(){\n//         const b1 = \"linear-gradient(266.5deg, #28BAD9 -13.11%, #119FBD 50.09%, #008CAA 102.55%)\";\n//         const b2 = \"linear-gradient(17deg, #28BAD9 -13.11%, #119FBD 50.09%, #008CAA 102.55%)\";\n//         gsap.fromTo(\".background-teal\", {background: b1}, {ease: \"none\", duration: 10, background: b2, repeat: -1, yoyo: true});\n//     });\n//     $('.inner-hero.background-orange').each(function(){\n//         const b1 = \"linear-gradient(266.5deg, #D56F1B -13.11%, #941B00 102.55%)\";\n//         const b2 = \"linear-gradient(17deg, #D56F1B -13.11%, #941B00 102.55%)\";\n//         gsap.fromTo(\".background-orange\", {background: b1}, {ease: \"none\", duration: 8, background: b2, repeat: -1, yoyo: true});\n//     });\n//     $('.inner-hero.background-purple').each(function(){\n//         const b1 = \"linear-gradient(266.5deg,  #7A2588 -13.11%, #4D0658 102.55%)\";\n//         const b2 = \"linear-gradient(17deg,  #7A2588 -13.11%, #4D0658 102.55%)\";\n//         gsap.fromTo(\".background-purple\", {background: b1}, {ease: \"none\", duration: 8, background: b2, repeat: -1, yoyo: true});\n//     });\n//     $('.inner-hero.background-green').each(function(){\n//         const b1 = \"linear-gradient(266.54deg, #818939 -13.11%, #33531A 102.55%)\";\n//         const b2 = \"linear-gradient(17deg,  #818939 -13.11%, #33531A 102.55%)\";\n//         gsap.fromTo(\".background-green\", {background: b1}, {ease: \"none\", duration: 8, background: b2, repeat: -1, yoyo: true});\n//     });\n\n//     //Heros\n//     let parallax = gsap.timeline()\n//         .to('.inner-hero .container, .single-blog_hero .container, .blog-list_hero .container', {\n//             y:-100,\n//             scrollTrigger:{\n//             trigger:'.inner-hero, .hero-area',\n//             start:'-100',\n//             end:'bottom',\n//             scrub:'0.3',\n//         }\n//     })\n\n\n\n//     //resources quick link cards\n//     $('.content-cards, .address-card, .academic-calendar-cards .card-item').each(function(){\n//         const b1 = \"linear-gradient(250.03deg,  #D56F1B 100%, #FFC50A 100%)\";\n//         const b2 = \"linear-gradient(250.03deg, #FFC50A 11.82%, #D56F1B 145.89%)\";\n//         $(document).on('mouseenter mouseleave touchend', '.content-cards_item, .address-card, .academic-calendar-cards .card-item', function (ev) {\n//             var el = jQuery(this).find('i');\n//             if(ev.type === 'mouseenter') {\n//                 TweenMax.staggerTo(el, 0.8, {'background-image': b1, ease:Power4.easeOut},0.07);\n//             } else {\n//                 TweenMax.staggerTo(el, 0.8, {'background-image': b2, ease:Power4.easeOut},0.07);\n//             }\n//         });\n//     });\n//     // Home Hero\n//     let heroContent = document.querySelectorAll(\".homepage-hero_content\")\n\n//     heroContent.forEach( (element) => {\n\n//         let headings = element.querySelectorAll(\"h1\")\n//         let copy = element.querySelector(\"p\")\n//         let links = element.querySelector(\".homepage-hero_buttons\")\n//         gsap.set([headings, copy, links],\n//         {opacity: 0, scale: 1, transformOrigin: '50% 50%'})\n//         gsap.set(headings, {scale: 0.9})\n//         gsap.set(copy, {y: 50})\n//         gsap.set(links, {y: 50})\n\n//         let tl = gsap.timeline()\n\n//         .to(headings, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, \"-=0.5\")\n//         .to(copy, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, \"-=0.7\")\n//         .to(links,{opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, \"-=0.9\")\n\n//         ScrollTrigger.create({\n//             trigger:element,\n//             start:\"top 90%\",\n//             toggleActions:\"play none none none\",\n//             animation:tl\n//         })\n\n//     })\n\n\n\n//     // //Full Width/inner flex Animations\n//     //\n//     // //50/50\n//     let contentImage = document.querySelectorAll(\".full-width-content.content-image .content-image_content\")\n\n//     contentImage.forEach( (element) => {\n\n//         let subHead = element.querySelector(\"span\")\n//         let headings = element.querySelectorAll(\"h2\")\n//         let copy = element.querySelector(\".copy\")\n//         gsap.set([headings, subHead, copy],\n//         {opacity: 0, scale: 1, transformOrigin: '50% 50%'})\n//         gsap.set(headings, {scale: 0.9})\n//         gsap.set(copy, {y: 50})\n\n//         let tl = gsap.timeline()\n\n//         .to(subHead, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'})\n//         .to(headings, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, \"-=0.1\")\n//         .to(copy, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, \"-=0.3\")\n\n//         ScrollTrigger.create({\n//             trigger:element,\n//             start:\"top 90%\",\n//             toggleActions:\"play none none none\",\n//             animation:tl\n//         })\n\n//     })\n//     //50/50 Links repeater\n//     $('.full-width-content.content-image .content-image_content').each(function(){\n\n//         gsap.utils.toArray('.content-image_content').forEach((sec, i) => {\n//           gsap.set('.content-image_content a', {opacity: 0, y: 50, scale: .9}),\n\n//           ScrollTrigger.batch(\".content-image_content a\", {\n//             onEnter: batch => gsap.to(batch, {opacity: 1, scale: 1, y: 0, stagger: {each: 0.15, grid: [1, 1]}, overwrite: true})\n//           });\n//         });\n//     });\n\n//     //Featured Image content\n//     let featuredImage = document.querySelectorAll(\".full-width-content.featured-image-block .container\")\n\n//     featuredImage.forEach( (element) => {\n\n//         let headings = element.querySelectorAll(\"h2\")\n//         let copy = element.querySelector(\".copy\")\n//         let image = element.querySelector(\".image-wrap\")\n//         gsap.set([headings, copy, image],\n//         {opacity: 0, scale: 1, transformOrigin: '50% 50%'})\n//         gsap.set(headings, {scale: 0.9})\n//         gsap.set(copy, {y: 50})\n//         gsap.set(image, {y: 50})\n\n//         let tl = gsap.timeline()\n\n//         .to(headings, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, \"-=0.1\")\n//         .to(copy, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, \"-=0.3\")\n//         .to(image,{opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, \"-=0.5\")\n\n//         ScrollTrigger.create({\n//             trigger:element,\n//             start:\"top 90%\",\n//             toggleActions:\"play none none none\",\n//             animation:tl\n//         })\n\n//     })\n\n//     //stats\n//     const items = document.querySelectorAll(\".stat .number\");\n//     let tl = gsap.timeline()\n\n//     .from(items, {textContent: 0, duration: 3, ease: \"power1.in\", snap: { textContent: 1 }, stagger: { each: 0.2,\n//         onUpdate: function() {\n//           this.targets()[0].innerHTML = (Math.ceil(this.targets()[0].textContent));\n//         },\n//       }\n//     });\n//     ScrollTrigger.create({\n//         trigger:'.stat-grid',\n//         start:\"top 90%\",\n//         toggleActions:\"play none none none\",\n//         animation:tl\n//     })\n\n//     //Program slider\n//     let programSlider = document.querySelectorAll(\".full-width-content.program-slider .program-slider_content\")\n\n//     programSlider.forEach( (element) => {\n\n//         let subHead = element.querySelector(\"span\")\n//         let headings = element.querySelectorAll(\"h2\")\n//         let copy = element.querySelector(\".copy\")\n//         let link = element.querySelector(\".link-arrow\")\n//         gsap.set([headings, subHead, copy, link],\n//         {opacity: 0, scale: 1, transformOrigin: '50% 50%'})\n//         gsap.set(headings, {scale: 0.9})\n//         gsap.set(copy, {y: 50})\n//         gsap.set(link, {y: 50})\n\n//         let tl = gsap.timeline()\n\n//         .to(subHead, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'})\n//         .to(headings, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, \"-=0.1\")\n//         .to(copy, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, \"-=0.3\")\n//         .to(link,{opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, \"-=0.5\")\n\n//         ScrollTrigger.create({\n//             trigger:element,\n//             start:\"top 90%\",\n//             toggleActions:\"play none none none\",\n//             animation:tl\n//         })\n\n//     })\n\n//     //News\n//     //Featured\n//     let recentNews = document.querySelectorAll(\".full-width-content.recent-news .container\")\n\n//     recentNews.forEach( (element) => {\n\n//         let postsHeading = element.querySelector(\"h2\")\n//         let featuredImg = element.querySelector(\".featured-posts .post-image\")\n//         let featuredHeadings = element.querySelectorAll(\".featured-posts h4\")\n//         let featuredCopy = element.querySelector(\".featured-posts .copy\")\n\n//         gsap.set([postsHeading, featuredImg, featuredHeadings, featuredCopy],\n//         {opacity: 0, scale: 1, transformOrigin: '50% 50%'})\n//         gsap.set(postsHeading, {scale: 0.9})\n//         gsap.set(featuredImg, {y: 50})\n//         gsap.set(featuredHeadings, {y: 50})\n//         gsap.set(featuredCopy, {y: 50})\n\n//         let tl = gsap.timeline()\n\n//         .to(postsHeading,{opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, 0)\n//         .to(featuredImg,{opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, \"-=0.3\")\n//         .to(featuredHeadings, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, \"-=0.5\")\n//         .to(featuredCopy, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, \"-=0.7\")\n\n//         ScrollTrigger.create({\n//             trigger:element,\n//             start:\"top 90%\",\n//             toggleActions:\"play none none none\",\n//             animation:tl\n//         })\n\n//     })\n//     //regular posts\n//     let recentPost = document.querySelectorAll(\".full-width-content.recent-news \")\n\n//     recentPost.forEach( (element) => {\n\n//         let post = element.querySelector(\".posts .post\")\n//         let link = element.querySelectorAll(\".posts a\")\n\n//         gsap.set([post, link],\n//         {opacity: 0, scale: 1, transformOrigin: '50% 50%'})\n//         gsap.set(post, {y: 50})\n//         gsap.set(link, {scale: 0.9})\n\n//         let tl = gsap.timeline()\n\n//         .to(post,{opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, 0)\n//         .to(link, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, \"-=0.3\")\n\n//         ScrollTrigger.create({\n//             trigger:element,\n//             start:\"top 90%\",\n//             toggleActions:\"play none none none\",\n//             animation:tl\n//         })\n\n//     })\n\n//     //Upcoming events\n//     let acaCalendar = document.querySelectorAll(\".upcoming-events .upcoming-events_aca_card\")\n\n//     acaCalendar.forEach( (element) => {\n\n//         let icon = element.querySelector(\"i\")\n//         let heading = element.querySelectorAll(\"h2\")\n//         let copy = element.querySelector(\"p\")\n//         let link = element.querySelector(\"a\")\n//         gsap.set([icon, heading, copy, link],\n//         {opacity: 0, scale: 1, transformOrigin: '50% 50%'})\n//         gsap.set(heading, {scale: 0.9})\n//         gsap.set(icon, {scale: 0.9})\n//         gsap.set(copy, {y: 50})\n//         gsap.set(link, {y: 50})\n\n//         let tl = gsap.timeline()\n\n//         .to(heading, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, \"-=0.1\")\n//         .to(icon, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, 0)\n//         .to(copy, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, \"-=0.3\")\n//         .to(link, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, \"-=0.5\")\n\n//         ScrollTrigger.create({\n//             trigger:element,\n//             start:\"top 90%\",\n//             toggleActions:\"play none none none\",\n//             animation:tl\n//         })\n\n//     })\n//     //event image\n//     let eventLink = document.querySelectorAll(\".upcoming-events .upcoming-events_event\")\n\n//     eventLink.forEach( (element) => {\n\n//         let heading = element.querySelectorAll(\"h2\")\n//         let link = element.querySelector(\"a\")\n//         gsap.set([heading, link],\n//         {opacity: 0, scale: 1, transformOrigin: '50% 50%'})\n//         gsap.set(heading, {scale: 0.9})\n//         gsap.set(link, {y: 50})\n\n//         let tl = gsap.timeline()\n\n//         .to(heading, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, \"-=0.7\")\n//         .to(link, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, \"-=0.9\")\n\n//         ScrollTrigger.create({\n//             trigger:element,\n//             start:\"top 90%\",\n//             toggleActions:\"play none none none\",\n//             animation:tl\n//         })\n\n//     })\n\n//     // Video Gallery\n//     let quote = document.querySelectorAll(\".full-width-content.featured-video-gallery .main-content\")\n\n//     quote.forEach( (element) => {\n\n//         let headings = element.querySelectorAll(\"h2\")\n//         let copy = element.querySelector(\"p\")\n//         let video = element.querySelector(\".video\")\n//         gsap.set([headings, copy, video],\n//         {opacity: 0, scale: 1, transformOrigin: '50% 50%'})\n//         gsap.set(headings, {scale: 0.9})\n//         gsap.set(copy, {y: 50})\n//         gsap.set(video, {y: 50})\n\n//         let tl = gsap.timeline()\n\n//         .to(headings, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, \"-=0.1\")\n//         .to(copy, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, \"-=0.3\")\n//         .to(video,{opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, \"-=0.5\")\n\n//         ScrollTrigger.create({\n//             trigger:element,\n//             start:\"top 90%\",\n//             toggleActions:\"play none none none\",\n//             animation:tl\n//         })\n\n//     })\n//     // //Flex Table\n//     let table = document.querySelectorAll(\".flex_table\")\n\n//     table.forEach( (element) => {\n\n//         let headings = element.querySelectorAll(\"h2\")\n//         let copy = element.querySelector(\".table-content\")\n//         gsap.set([headings, copy],\n//         {opacity: 0, scale: 1, transformOrigin: '50% 50%'})\n//         gsap.set(headings, {scale: 0.9})\n//         gsap.set(copy, {y: 50})\n\n//         let tl = gsap.timeline()\n\n//         .to(headings, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, \"-=0.1\")\n//         .to(copy, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, \"-=0.3\")\n\n//         ScrollTrigger.create({\n//             trigger:element,\n//             start:\"top 90%\",\n//             toggleActions:\"play none none none\",\n//             animation:tl\n//         })\n\n//     })\n\n\n//     //wysiwyg\n//     let wysiwyg = document.querySelectorAll(\".flex_basic-wysiwyg\")\n\n//     wysiwyg.forEach( (element) => {\n\n//     \tlet headings = element.querySelectorAll(\"h2\")\n//         let copy = element.querySelector(\".copy\")\n\n//     \tlet tl = gsap.timeline()\n\n//     \t .from(headings, {y:100, opacity:0}, 0)\n//          .from(copy, {y:100, opacity:0, stagger:0.15}, \"-=0.1\")\n\n//     \tScrollTrigger.create({\n//     \t\ttrigger:element,\n//     \t\tstart:\"top 90%\",\n//     \t\ttoggleActions:\"play none none reverse\",\n//     \t\tanimation:tl\n//     \t})\n\n//     })\n//     let wysiwygColumns = document.querySelectorAll(\".flex_basic-wysiwyg .column-content\")\n\n//     wysiwygColumns.forEach( (element) => {\n\n//     \tlet contentLeft = element.querySelectorAll(\".copy-left\")\n//         let contentRight = element.querySelector(\".copy-right\")\n\n//     \tlet tl = gsap.timeline()\n\n//     \t .from(contentLeft, {y:100, opacity:0}, 0)\n//          .from(contentRight, {y:100, opacity:0, stagger:0.15}, \"-=0.1\")\n\n//     \tScrollTrigger.create({\n//     \t\ttrigger:element,\n//     \t\tstart:\"top 90%\",\n//     \t\ttoggleActions:\"play none none none\",\n//     \t\tanimation:tl\n//     \t})\n\n//     })\n\n\n//     // //Accordions\n//     // //accordion titles\n//     //card Sections\n//     let expandCollapse = document.querySelectorAll(\".flex_expand-collapse\")\n//         expandCollapse.forEach( (element) => {\n\n//             let headings = element.querySelectorAll(\"h2\")\n//             let copy = element.querySelector(\".copy\")\n\n\n//         gsap.set([headings, copy],{opacity: 0, scale: 1, y:50, transformOrigin: '50% 50%'})\n\n//         let tl = gsap.timeline()\n\n//         .to(headings, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, 0)\n//         .to(copy, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, \"-=0.1\")\n\n//         ScrollTrigger.create({\n//            trigger:element,\n//            start:\"top 90%\",\n//            toggleActions:\"play none none none\",\n//            animation:tl\n//         })\n\n//     })\n\n\n\n\n//     // //Form Block\n//     let formBlock = document.querySelectorAll(\".form-content\")\n\n//     formBlock.forEach( (element) => {\n\n//         let header = element.querySelector(\"h2\")\n//         let copy = element.querySelector(\"p\")\n//         let form = element.querySelector('form');\n\n//         gsap.set([header, copy, form],\n//         {opacity: 0, scale: 1, transformOrigin: '50% 50%'})\n//         gsap.set(header, {y:100, scale: 0.9})\n//         gsap.set(copy, {y: 50})\n\n//         let tl = gsap.timeline()\n\n//         .to(header, {opacity: 1, scale: 1, y: 0, stagger:0.15, transformOrigin: '50% 50%'}, 0)\n//         .to(copy, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, \"-=0.3\")\n//         .to(form, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, \"-=0.5\")\n\n//         ScrollTrigger.create({\n//             trigger:element,\n//             start:\"top 90%\",\n//             toggleActions:\"play none none none\",\n//             animation:tl\n//     \t})\n//     })\n\n//     // //Contact Stuff\n//     // //Phone titles\n//     let contactPhoneHeaders = document.querySelectorAll(\".contact-us .phone-details\")\n//     contactPhoneHeaders.forEach( (element) => {\n\n//        let headings = element.querySelectorAll(\"h3\")\n//         let copy = element.querySelector(\".copy\")\n\n//        let tl = gsap.timeline()\n\n//         .from(headings, {y:100, opacity:0}, 0)\n//          .from(copy, {y:100, opacity:0, stagger:0.15}, \"-=0.1\")\n\n//        ScrollTrigger.create({\n//            trigger:element,\n//            start:\"top 90%\",\n//            toggleActions:\"play none none none\",\n//            animation:tl\n//        })\n\n//     })\n//     //phone items\n//     let phoneItems = document.querySelectorAll(\".contact-us .phone-details .phone-row\")\n\n//     phoneItems.forEach( (element) => {\n\n//         let phoneLabel = element.querySelector(\".label\")\n//         let phoneNumber = element.querySelector(\".phone-numbers\")\n\n//         gsap.set([phoneLabel, phoneNumber],{opacity: 0, scale: 1, y:50, transformOrigin: '50% 50%'})\n\n//         let tl = gsap.timeline()\n\n//         .to(phoneLabel, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, \"-=0.3\")\n//         .to(phoneNumber, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, \"-=0.3\")\n\n//         ScrollTrigger.create({\n//             trigger:element,\n//             start:\"top 90%\",\n//             toggleActions:\"play none none none\",\n//             animation:tl\n\n//        })\n\n//     })\n//     // //Contact Form\n//     let contactForm = document.querySelectorAll(\".contact-us .contact-us-form\")\n//         contactForm.forEach( (element) => {\n\n//         let headings = element.querySelectorAll(\"h1, h2, h3, h4, h5, h6\")\n//         let copy = element.querySelector(\"p\")\n//         let form = element.querySelector('form');\n\n//         gsap.set([headings, copy, form],{opacity: 0, scale: 1, y:50, transformOrigin: '50% 50%'})\n\n//         let tl = gsap.timeline()\n\n//         .to(headings, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, 0)\n//         .to(copy, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, \"-=0.1\")\n//         .to(form, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, \"-=0.3\")\n\n//         ScrollTrigger.create({\n//            trigger:element,\n//            start:\"top 90%\",\n//            toggleActions:\"play none none none\",\n//            animation:tl\n//         })\n\n//     })\n\n//     //ALL ROLL OUT ANIMATIONS\n//     //This means that it is revealed as you scroll through the area vs as you hit a trigger\n//     //It has EVENTS, RESOURCES, BLOGS, SIDEBAR ITEMS, DIRECTORY, SEARCH RESULTS, and TABLEPRESS TABLES\n//     $('.event-list, .resource-list_table, .blog-list_main, .left-sidebar-menu .child-menu, .flex_table, .employee-list .container, .search-results .results').each(function(){\n\n//         gsap.utils.toArray('.event-list, .resource-list_table, .blog-list_main, .child-menu, .tablepress, .employee-list .container, .search-results .results').forEach((sec, i) => {\n//           gsap.set('.event-list__event, .resource-list_item, .blog-item, .child-menu .page_item, tr, .employee-item, article', {opacity: 0, y: -100,}),\n\n//           ScrollTrigger.batch(\".event-list__event, .resource-list_item, .blog-item, .child-menu .page_item, tr, .employee-item, article\", {\n//             onEnter: batch => gsap.to(batch, {opacity: 1, y: 0, stagger: {each: 0.15, grid: [1, 2]}, overwrite: true})\n//           });\n//         });\n//     });\n//     //Accordion\n//     $('.flex_expand-collapse').each(function(){\n\n//         gsap.utils.toArray('.flex_expand-collapse').forEach((sec, i) => {\n//           gsap.set('.collapse-toggle', {opacity: 0, y: -100,}),\n\n//           ScrollTrigger.batch(\".collapse-toggle\", {\n//             onEnter: batch => gsap.to(batch, {opacity: 1, y: 0, stagger: {each: 0.15, grid: [1, 1]}, overwrite: true})\n//           });\n//         });\n//     });\n\n//     //card Sections\n//     let flexCards = document.querySelectorAll(\".flex_image-cards, .flex_content-cards, .error404, flex_program-cards\")\n//         flexCards.forEach( (element) => {\n\n//         let header = element.querySelectorAll(\"h2\")\n//         let content = element.querySelectorAll('p, .copy .page-info')\n//         let cards = element.querySelectorAll('.image-cards .image-cards_item, .content-cards .content-cards_item, .program-cards_wrap .program')\n\n\n//         gsap.set([header, content, cards],{opacity: 0, scale: 1, y:50, transformOrigin: '50% 50%'})\n\n//         let tl = gsap.timeline()\n\n//         .to(header, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, 0)\n//         .to(content, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, \"-=0.1\")\n//         .to(cards, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%', stagger:0.2}, \"-=0.3\")\n\n//         ScrollTrigger.create({\n//            trigger:element,\n//            start:\"top 90%\",\n//            toggleActions:\"play none none none\",\n//            animation:tl\n//         })\n\n//     })\n\n//     //Blog Single related\n//     let blogRelated = document.querySelectorAll(\".single-blog\")\n//         blogRelated.forEach( (element) => {\n\n//         let header = element.querySelectorAll(\".single-blog_related-blogs h2\")\n//         let button = element.querySelectorAll('.single-blog_related-blogs .button')\n//         let cards = element.querySelectorAll('.single-blog_related-blogs .card')\n\n\n//         gsap.set([header, button, cards],{opacity: 0, scale: 1, y:50, transformOrigin: '50% 50%'})\n\n//         let tl = gsap.timeline()\n\n//         .to(header, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, 0)\n//         .to(button, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%'}, \"-=0.1\")\n//         .to(cards, {opacity: 1, scale: 1, y: 0, transformOrigin: '50% 50%', stagger:0.15}, \"-=0.3\")\n\n//         ScrollTrigger.create({\n//            trigger:element,\n//            start:\"top 90%\",\n//            toggleActions:\"play none none none\",\n//            animation:tl\n//         })\n\n//     })\n\n\n// });\n","jQuery(document).ready(function($) {\n\n    // init controller\n    var position = $(window).scrollTop();\n\n    $(window).scroll(function() {\n        var scroll = $(window).scrollTop();\n        if(scroll > position && scroll < 100) {\n          $('.site-newheader').addClass('on-scroll-down');\n          $('.site-newheader').removeClass('on-scroll-up');\n      } else {\n          $('.site-newheader').removeClass('on-scroll-down');\n          $('.site-newheader').addClass('on-scroll-up');\n          $('.site-newheader').removeClass('on-pin');\n        }\n\n        if(scroll < 100) {\n          $('.site-newheader').removeClass('on-scroll-down');\n          $('.site-newheader').removeClass('on-scroll-up');\n        }\n\n        if(scroll > position && scroll > 600) {\n          $('.site-newheader').addClass('on-pin');\n        }\n\n        position = scroll;\n\n    });\n\n    // // Add class to submenu to help with column wrapping\n    // $(\"ul#primary-menu > li.menu-item-has-children .mega-menu > ul.sub-menu > li.menu-item-has-children\").parent().addClass('flex-layout');\n\n\n    // // Expandable Search Functionality\n\n    // // Search Toggle\n    // $('.searchform .search-field').attr('placeholder', 'Search by keyword...');\n    // $('.searchform .search-submit').val('');\n\n    // $(\".search_icon\").click(function() {\n    //    $(this).next(\".searchform\").animate({'width': 'toggle'});\n    //    $(this).toggleClass('open');\n\n    //    if ( $(this).hasClass( \"open\" ) ) {\n    //      $(this).find('i').attr('class','fal fa-times');\n    //      $(this).next('.searchform .search-submit').show();\n    //    } else {\n    //     $(this).find('i').attr('class','fal fa-search');\n    //       $(this).next('.searchform .search-submit').hide();\n    //       $(this).next('.searchform .search-field').val('');\n    //    }\n    // });\n\n      //Search JS\n      // $(document).keydown(function(e) {\n      //   if (e.keyCode == 27) {\n      //     $(\".searchform\").hide();\n      //     $('.search_icon').removeClass('open');\n      //     $('.search_icon i').attr('class','fal fa-search');\n      //     $('.searchform .search-field').val('');\n      //   }\n      // });\n\n\n      /*******************************************\n      * Mobile Menu Stuff *\n      * We are using sidr to handle our menu JS *\n      * https://www.berriart.com/sidr/ *\n      *******************************************/\n\n    //   var sidrName = \"sidr-main\";\n\n    //   $(\".mobile-navigation\").sidr({\n    //      name: sidrName,\n    //      side: \"right\",\n    //      source: \".search.mobile, .main-navigation, .menu-mobile-buttons-container, .menu-user-roles-menu-container, .menu-utility-menu-container\",\n    //      renaming: false,\n    //      onOpen: function() {\n    //          $(window).on(\"click.sidr\", function(e) {\n    //              $.sidr(\"close\", sidrName);\n    //          });\n\n    //          $(\"#mobile-menu-toggle\").addClass(\"menu-open\");\n    //          $('body').append('<div class=\"mobile-menu-overlay\"></div>');\n    //          $('body').addClass('lock-scroll');\n    //          $('.sidr').prepend('<button class=\"close mobile menu\" aria-label=\"Close mobile menu\"><i class=\"fal fa-times\"></i></button>');\n    //          $('.sidr .close').click(function() {\n    //              $.sidr(\"close\", sidrName);\n    //          })\n    //      },\n    //      onClose: function() {\n    //          $(window).off(\"click.sidr\");\n    //          $(\"#mobile-menu-toggle\").removeClass(\"menu-open\");\n    //          $('.mobile-menu-overlay').remove();\n    //          $('body').removeClass('lock-scroll');\n    //          $('.sidr .close').remove();\n    //      }\n    //  });\n\n     // Don't you dare close me out!\n    //  $(\"#\" + sidrName).on(\"click.sidr\", function(e) {\n    //      e.stopPropagation();\n    //  });\n\n    //  $(\".sidr #primary-menu >.menu-item-has-children\").append('<i class=\"fas fa-caret-down\"></i>');\n\n\n    //  $(\".sidr #primary-menu > li.menu-item-has-children > a\").on(\"click\", function(e) {\n    //      e.preventDefault();\n    //      $(this).parent().toggleClass('open');\n\n    //      var parent = $(this).parent();\n    //      if (parent.children(\".mega-menu\").length > 0) {\n    //          parent.children(\".mega-menu\").slideToggle();\n    //      }\n    //      return false;\n    //  });\n\n\n\n     //Alert and pop up Stuff\n    // var adminHeight = $('#wpadminbar').outerHeight();\n    // var headerHeight = $('.site-newheader').outerHeight();\n\n    // $('.site-newheader').css('top', adminHeight);\n    // $('#primary').css('margin-top',headerHeight);\n\n\n\n    // $( window ).resize(function() {\n    //   var adminHeight2 = $('#wpadminbar').outerHeight();\n    //   var headerHeight2 = $('.site-newheader').outerHeight();\n    //   $('.site-newheader').css('top', adminHeight2);\n    //   $('#primary').css('margin-top',headerHeight2);\n    // });\n\n\n    // $('.close-alert').click(function(){ // Class for the close button\n    //    $('.alert-bar').hide();\n    //    $('.alert-bar').css('opacity', '0');\n    //    $('.alert-bar').css('height', '0');\n    //    $('.site-newheader').removeClass('has-alert');\n    //    var headerHeight3 = $('.site-newheader').outerHeight();\n    //    $('#primary').css('margin-top',headerHeight3);\n\n    //    $.cookie('alert-box', 'closed', { expires: 1, path: '/' });\n    // });\n\n\n    // if( $.cookie('alert-box') === 'closed' ){\n    //   $('.alert-bar').hide();\n    //   $('.alert-bar').css('opacity', '0');\n    //   $('.alert-bar').css('height', '0');\n    //   $('.site-newheader').removeClass('has-alert');\n    //   var headerHeight4 = $('.site-newheader').outerHeight();\n    //   $('#primary').css('margin-top',headerHeight4);\n\n    // } else {\n    //   $('.alert-bar').show();\n    //   $('.alert-bar').css('display', 'flex');\n    //   $('.alert-bar').css('opacity', '1');\n    //   $('.alert-bar').css('height', 'auto');\n    //   var headerHeight5 = $('.site-newheader').outerHeight();\n    //   $('#primary').css('margin-top',headerHeight5);\n    // }\n});\n","// jQuery(document).ready(function($) {\n//     /**\n//      * Left Sidebar Mobile dropdown\n//      */\n//     function toggleMenu() {\n//         console.log('click');\n//         $(this).toggleClass('active');\n//         $(\".main-content-wrapper_sidebar .sidebar-menu\").slideToggle();\n//         if ($(this).hasClass('active')) {\n//             $('.main-content-wrapper_sidebar .sidebar-menu').attr('aria-hidden', false);\n//         } else {\n//             $('.main-content-wrapper_sidebar').attr('aria-hidden', true);\n//         }\n//         return false;\n//     }\n\n//     // $(window).resize(function() {\n//     //     if ($(this).width() >= 1024) {\n//     //         $('.main-content-wrapper_sidebar .sidebar-menu').css('display', 'block');\n//     //     }\n//     // });\n\n//     $('.inner-page .mobile-menu-toggle').on('mousedown touchstart', toggleMenu);\n\n//     /**\n//      * Right Sidebar Anchor Links\n//      */\n\n//     // Add right sidebar\n//     function addToSidebar() {\n//         const hash = $(location).attr('hash').replace(\"#\", \"\");\n//         const classID = $(this).attr('id');\n//         if (hash === classID) {\n//             $('.right-sidebar').append('<a class=\"scroll-link\" href=\"#' + classID + '\">' + $(this).html() + '</a>');\n//         } else {\n//             $('.right-sidebar').append('<a href=\"#' + classID + '\" class=\"scroll-link\">' + $(this).html() + '</a>');\n//         }\n//     }\n\n//     // Right sidebar Smooth scrolling\n//     function scrollSmooth(event) {\n\n//         // Smooth Scrolling for right sidebar anchors\n//         // Reference: https://css-tricks.com/snippets/jquery/smooth-scrolling/\n//         if (location.pathname.replace(/^\\//, '') == this.pathname.replace(/^\\//, '') && location.hostname == this.hostname) {\n//             // Figure out element to scroll to\n//             let target = $(this.hash);\n//             target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');\n//             // Does a scroll target exist?\n//             if (target.length) {\n//                 // Only prevent default if animation is actually gonna happen\n//                 event.preventDefault();\n//                 $('html, body').animate({\n//                     scrollTop: target.offset().top - 150\n//                 }, 1000, function() {\n//                     // Callback after animation\n//                     // Must change focus!\n//                     var $target = $(target);\n//                     $target.focus();\n//                     if ($target.is(\":focus\")) { // Checking if the target was focused\n//                         return false;\n//                     } else {\n//                         $target.attr('tabindex','-1'); // Adding tabindex for elements not focusable\n//                         $target.focus(); // Set focus again\n//                     };\n//                 });\n//             }\n//         }\n\n//     }\n//     $('.page-template-page-inner-page .flex').each(function() {\n//         var str = $(this).find('h2').text();\n//         str = str.replace(/\\s+/g, '-').toLowerCase();\n//         $(this).find('h2').attr('id', str);\n//     });\n\n//     $('.page-template-page-full-width .full-width-content').each(function() {\n//         var str = $(this).find('h2').text();\n//         str = str.replace(/\\s+/g, '-').toLowerCase();\n//         $(this).attr('id', str);\n//     });\n\n\n//     $('.flex h2').each(addToSidebar);\n\n//     $('.right-sidebar a:first-child').addClass('active');\n//     $('.right-sidebar a').on('click', scrollSmooth);\n\n\n\n//     // Right sidebar stick position\n//     const headerHeight = $('.site-header').outerHeight(true);\n//     const sidebarHeight = $('.right-sidebar').outerHeight(true);\n//     $('.right-sidebar').css('top', headerHeight);\n//     $('.right-sidebar').css('--offset', headerHeight);\n//     //$('.right-sidebar').css('max-height', sidebarHeight + 100);\n\n//     $(window).resize(function() {\n//         const headerHeight2 = $('.site-header').outerHeight(true);\n//         const sidebarHeight2 = $('.right-sidebar').outerHeight(true);\n//         $('.right-sidebar').css('top', headerHeight2);\n//         $('.right-sidebar').css('--offset', headerHeight2);\n//         //$('.right-sidebar').css('max-height', sidebarHeight2 + 100);\n\n//     });\n\n\n//     // Right Sidebar Highlighting\n//     // $sections includes all of the container divs that relate to menu items.\n//     var $sections = $('.center-content .flex');\n\n\n//     if ( $( 'body' ).first().hasClass( 'page-template-page-inner-page' ) ) {\n\n//       // The user scrolls\n//       $(window).scroll(function(){\n\n//         // currentScroll is the number of pixels the window has been scrolled\n//         var currentScroll = $(this).scrollTop();\n\n//         // $currentSection is somewhere to place the section we must be looking at\n//         var $currentSection = '';\n\n//         // We check the position of each of the divs compared to the windows scroll positon\n//         $sections.each(function(){\n//           // divPosition is the position down the page in px of the current section we are testing\n//           var divPosition = $(this).offset().top;\n\n//           // If the divPosition is less the the currentScroll position the div we are testing has moved above the window edge.\n//           // the -1 is so that it includes the div 1px before the div leave the top of the window.\n//           if( divPosition - 200 < currentScroll ){\n//             // We have either read the section or are currently reading the section so we'll call it our current section\n//             $currentSection = $(this);\n\n//             // If the next div has also been read or we are currently reading it we will overwrite this value again. This will leave us with the LAST div that passed.\n//           }\n//             if ( $currentSection != ''){\n\n//               // This is the bit of code that uses the currentSection as its source of ID\n//                 var id = $currentSection.find('h2').attr('id');\n//                 $('a.scroll-link').removeClass('active');\n//                 $('a.scroll-link[href=\"#'+id+'\"]').addClass('active');\n//             }\n\n\n//         });\n\n//       });\n//     }\n\n//     /**\n//      * Expand/Collapse Repeater\n//      */\n//     function toggleAttr() {\n//         if ($('.collapse-toggle').hasClass('active')) {\n//             $('.collapse-content').attr('aria-hidden', false);\n//         } else {\n//             $('.collapse-content').attr('aria-hidden', true);\n//         }\n//     }\n\n//     function toggleExpandCollapse() {\n//         $(this).toggleClass('active');\n//         $('.active').not(this).next(\".collapse-content\").slideToggle();\n//         $('.active').not(this).removeClass('active');\n//         $(this).next(\".collapse-content\").slideToggle();\n//         toggleAttr();\n//         return false;\n//     }\n//     $('.collapse-content').hide();\n//     $('.collapse-toggle').on('click', toggleExpandCollapse);\n\n\n//     //Add a table row style\n//     $('.table-header').parent('.column-1').addClass('header-row');\n\n\n//     // //Image Cards\n//     if($(window).width() >= 1024){\n//         $('.image-cards_item').each(function() {\n//             var cardHeight = $(this).find('.card-slide').outerHeight(true);\n//             var cardHeightTotal = cardHeight + 30;\n//             console.log(cardHeightTotal);\n//             $(this).css('height', cardHeightTotal + 'px');\n//          });\n//         var $sameHeightHeader = $('.image-cards_item');\n//         var maxHeight = 0;\n//         $sameHeightHeader.each(function() {\n//             maxHeight = Math.max(maxHeight, $(this).outerHeight());\n//         });\n//         $sameHeightHeader.css({ height: maxHeight + 'px' });\n\n//         $('.image-cards_item').each(function() {\n//             var cardContent = $(this).find('.card-slide .card-content').outerHeight(true);\n//             var cardContentTotal = cardContent + 30;\n//             $(this).find('.card-slide').css('bottom','-' + cardContentTotal + 'px');\n//             $(this).hover(function(){\n//               $(this).find('.card-slide').css('bottom',0);\n//               }, function(){\n//               $(this).find('.card-slide').css('bottom','-' + cardContentTotal + 'px');\n//             });\n//          });\n//     } else {\n//         $('.image-cards_item').each(function() {\n//             $(this).css('height', 'auto');\n//         });\n//     }\n\n//     $(window).resize(function() {\n//         if($(window).width() >= 1024){\n//             $('.image-cards_item').each(function() {\n//                 var cardHeight2 = $(this).find('.card-slide').outerHeight(true);\n//                 var cardHeightTotal2 = cardHeight2 + 30;\n//                 console.log(cardHeightTotal2);\n//                 $(this).css('height', cardHeightTotal2 + 'px');\n//              });\n//             var $sameHeightHeader2 = $('.image-cards_item');\n//             var maxHeight2 = 0;\n//             $sameHeightHeader2.each(function() {\n//                 maxHeight2 = Math.max(maxHeight2, $(this).outerHeight());\n//             });\n//             $sameHeightHeader2.css({ height: maxHeight2 + 'px' });\n\n//             $('.image-cards_item').each(function() {\n//                 var cardContent2 = $(this).find('.card-slide .card-content').outerHeight(true);\n//                 var cardContentTotal2 = cardContent2 + 30;\n//                 $(this).find('.card-slide').css('bottom','-' + cardContentTotal2 + 'px');\n//                 $(this).hover(function(){\n//                   $(this).find('.card-slide').css('bottom',0);\n//                   }, function(){\n//                   $(this).find('.card-slide').css('bottom','-' + cardContentTotal2 + 'px');\n//                 });\n//              });\n//         } else {\n//             $('.image-cards_item').each(function() {\n//                 $(this).css('height', 'auto');\n//             });\n//         }\n//     });\n\n\n// });\n","// jQuery(document).ready(function($) {\n//     /**\n//      * Left Sidebar Mobile dropdown\n//      */\n//     function toggleFilters() {\n//         if ($(this).width() <= 1024) {\n//             //console.log('click');\n//             $(this).toggleClass('active');\n//             $(\".filter-container\").slideToggle();\n//             if ($(this).hasClass('active')) {\n//                 $('.filter-container').attr('aria-hidden', false);\n//             } else {\n//                 $('.filter-container').attr('aria-hidden', true);\n//             }\n//             return false;\n//         }\n//     }\n\n//     // $(window).resize(function() {\n//     //     if ($(this).width() >= 1024) {\n//     //         $('.filter-container').css('display', 'block');\n//     //         $('.filter-container').attr('aria-hidden', false);\n//     //     } else {\n//     //         $('.filter-container').css('display', 'none');\n//     //         $('.filter-container').attr('aria-hidden', true);\n//     //\n//     //     }\n//     // });\n\n\n//     $('.filter-title').on('mousedown touchstart', toggleFilters);\n//     // \n//     // $(document).on(\"sf:ajaxfinish\", \".searchandfilter\", function(){\n//     //      if ($(this).width() <= 1024) {\n//     //         $('.filter-container').css('display', 'none');\n//     //         $('.filter-container').attr('aria-hidden', true);\n//     //     }\n//     //\n//     // });\n\n//     var quicklinks = $('.event-sidebar__quicklinks');\n//     if ($(this).width() <= 1024) {\n//         $('.event-list').append(quicklinks);\n//     } else {\n//         $('.event-sidebar').append(quicklinks);\n//     }\n\n//     $(window).resize(function() {\n//         if ($(this).width() <= 1024) {\n//             $('.event-list').append(quicklinks);\n//         } else {\n//             $('.event-sidebar').append(quicklinks);\n//         }\n//     });\n\n//     // Textbook Mobile Links Dropdowon\n\n//     $(\".mobile-actions > .icon-wrap\").on(\"mousedown touchstart\", function(e) {\n//         e.preventDefault();\n//         $(this).toggleClass('active');\n//         $(this).next('.mobile-action-dropdown').toggleClass('open');\n//         return false;\n//     });\n\n// });\n","// jQuery(document).ready(function($) {\n\n//     // Scroll to behavior for links that include and ID \n//     if (window.location.hash) {\n//          var hash = window.location.hash;\n//          $('html, body').animate({\n//              scrollTop :  $(hash).offset().top\n//          }, 500);\n//      };\n\n//     $('.program-slider_slide_wrap').slick({\n//         speed: 300,\n//         slidesToShow: 1,\n//         centermode: true,\n//         infinite: true,\n//         draggable: true,\n//         cssEase: 'linear',\n//         variableWidth: true,\n//         adaptiveHeight: true,\n//         touchThreshold: 100,\n//         //centerMode: true,\n//         focusOnSelect: true,\n//         prevArrow: $('.prev-arrow'),\n//         nextArrow: $('.next-arrow'),\n//         responsive: [\n//         {\n//             breakpoint: 1024,\n//             settings: {\n//                 slidesToShow: 1,\n//                 //slidesToScroll: 3,\n//                 //infinite: true,\n//                 //dots: true\n//             }\n//         },\n//         {\n//             breakpoint: 768,\n//             settings: {\n//                 slidesToShow: 1,\n//                 //slidesToScroll: 2\n//             }\n//         },\n//         {\n//             breakpoint: 480,\n//             settings: {\n//                 slidesToShow: 1,\n//                 //slidesToScroll: 1\n//             }\n//         }\n//       ]\n//     });\n\n//     //video slider\n//     $('.media-gallery').slick({\n//         speed: 300,\n//         slidesToShow: 1,\n//         centermode: true,\n//         infinite: true,\n//         draggable: true,\n//         cssEase: 'linear',\n//         variableWidth: true,\n//         adaptiveHeight: true,\n//         touchThreshold: 100,\n//         //centerMode: true,\n//         focusOnSelect: false,\n//         prevArrow: $('.prev-arrow-video'),\n//         nextArrow: $('.next-arrow-video'),\n//         responsive: [\n//         {\n//             breakpoint: 1024,\n//             settings: {\n//                 slidesToShow: 1,\n//                 //slidesToScroll: 3,\n//                 //infinite: true,\n//                 //dots: true\n//             }\n//         },\n//         {\n//             breakpoint: 768,\n//             settings: {\n//                 slidesToShow: 1,\n//                 //slidesToScroll: 2\n//                 //variableWidth: false,\n//             }\n//         },\n//         {\n//             breakpoint: 480,\n//             settings: {\n//                 slidesToShow: 1,\n//                 //variableWidth: false,\n//                 //slidesToScroll: 1\n//             }\n//         }\n//       ]\n//     });\n\n//     $('.tab-content-wrap').slick({\n//         slidesToShow: 1,\n//         slidesToScroll: 1,\n//         arrows: false,\n//         fade: true,\n//         infinite: true,\n//         adaptiveHeight: true,\n//         asNavFor: '.tab'\n//     });\n//     //var tabCount = $(\".tab p\").length - .1;\n//     $('.tab').slick({\n//         slidesToScroll: 1,\n//         slidesToShow: 12,\n//         asNavFor: '.tab-content-wrap',\n//         focusOnSelect: true,\n//         infinite: true,\n//         cssEase: 'linear',\n//         variableWidth: true,\n//         prevArrow: $('.prev-arrow-timeline'),\n//         nextArrow: $('.next-arrow-timeline'),\n//         responsive: [\n//         {\n//             breakpoint: 768,\n//             settings: {\n//                 slidesToShow: 3,\n//                 variableWidth: false,\n//                 //slidesToScroll: 1\n//             }\n//         },\n//         {\n//             breakpoint: 480,\n//             settings: {\n//                 slidesToShow: 2,\n//                 variableWidth: false,\n//                 //slidesToScroll: 1\n//             }\n//         },\n\n//         ]\n//     });\n\n//     $('.stats').slick({\n//         speed: 300,\n//         slidesToShow: 1,\n//         centermode: true,\n//         infinite: true,\n//         draggable: true,\n//         cssEase: 'linear',\n//         variableWidth: true,\n//         adaptiveHeight: true,\n//         touchThreshold: 100,\n//         focusOnSelect: false,\n//         arrows: false,\n//         mobileFirst: true,\n//         responsive: [{\n//           breakpoint: 768,\n//           settings: 'unslick'\n//         }]\n//     });\n\n//     // Making sure the slider fires on when the window resizes\n//         $(window).on('resize', function(){\n//           $('.stats').slick('resize');\n//         });\n\n\n//     //Modal pop_up\n//     if(window.location.href.indexOf('#video-popup') != -1) {\n//         $('.video-popup').css('visibility', 'visible');\n//         $('.video-popup').css('opacity', '1');\n//         $('.video-popup').css('visibility', 'visible');\n//    }\n\n//    //contact modal\n//     $(document).on('click', '.close-popup', function(){\n//         $('.video-popup').css('visibility', 'hidden');\n//         $('.video-popup').css('opacity', '0');\n//         $('.popup-overlay').css('visibility', 'hidden');\n//     });\n\n//     //Video\n//     $(document).on('click', '.video-button', function(){\n//         $('.video-popup').css('visibility', 'visible');\n//         $('.video-popup').css('opacity', '1');\n//         $('.popup-overlay').css('visibility', 'visible');\n//     });\n\n//     //media lightbox (video)\n//     $(document).on('click', '.image-overlay', function(){\n//         $('.iframe').toggleClass('open');\n//     });\n//     $(document).on('click', '.close-popup', function(){\n//         $('.iframe').removeClass('open');\n//     });\n\n//     $(document).on('click', '.popup-overlay', function(){\n//         $('.video-popup').css('visibility', 'hidden');\n//         $('.video-popup').css('opacity', '0');\n//         $('.popup-overlay').css('visibility', 'hidden');\n//     });\n//     //Add to hover\n//     $('.add-to-cal').hover(function () {\n//         $('.add-to-links').stop().slideToggle('slow');\n// \t});\n\n//     // Academic Filter\n//     const currentYear = (new Date).getFullYear();\n//     if (!getUrlParameter('_sfm_academic_term') && !getUrlParameter('_sfm_academic_year')) {\n//         console.log('not filtered', currentYear);\n//         $('.academic-calendar_filter form > ul li:first-child ul li:nth-child(2)').addClass('sf-option-active');\n//         $('.academic-calendar_filter form > ul li:first-child ul li:nth-child(2) input').attr('checked', 'checked');\n//         $('.academic-calendar_filter form > ul li:last-child select option:contains(\"' + currentYear + '\")').addClass('sf-option-active');\n//         $('.academic-calendar_filter form > ul li:last-child select option:contains(\"' + currentYear + '\")').attr('selected', 'selected');\n//     } else {\n//         console.log('filtered');\n//     }\n\n\n//     //Make cards cooler in general\n//     var $sameHeightHeader = $('.content-cards_item .main-text');\n//     var $lastDiv = $('.content-cards_item:nth-child(odd):last-child .main-text');\n//     var maxHeight = 0;\n//     $sameHeightHeader.each(function() {\n//         maxHeight = Math.max(maxHeight, $(this).outerHeight());\n//     });\n//     $sameHeightHeader.css({ height: maxHeight + 'px' });\n//     $lastDiv.css({height:'auto'});\n\n//     $(window).resize(function() {\n//         var $sameHeightHeader2 = $('.content-cards_item .main-text');\n//         var $lastDiv2 = $('.content-cards_item:nth-child(odd):last-child .main-text');\n//         var maxHeight2 = 0;\n//         $sameHeightHeader2.each(function() {\n//             maxHeight2 = Math.max(maxHeight2, $(this).outerHeight());\n//         });\n//         $sameHeightHeader2.css({ height: maxHeight2 + 'px' });\n//         $lastDiv2.css({height:'auto'});\n//     });\n\n// });\n\n// /**\n//  * Get search param from url\n//  * @param {String} name\n//  */\n// function getUrlParameter(name) {\n//     name = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]')\n//     var regex = new RegExp('[\\\\?&]' + name + '=([^&#]*)')\n//     var results = regex.exec(location.search)\n//     return results === null ? '' : decodeURIComponent(results[1].replace(/\\+/g, ' '))\n// }\n"]}
